{"version":3,"sources":["api.ts","toys/ToyForm.tsx","toys/CreateToy.tsx","toys/ListToy.tsx","toys/DetailToy.tsx","toys/UpdateToy.tsx","tickets/TicketForm.tsx","tickets/CreateTicket.tsx","tickets/ListTicket.tsx","tickets/DetailTicket.tsx","tickets/UpdateTicket.tsx","users/UserForm.tsx","users/CreateUser.tsx","users/ListUser.tsx","users/DetailUser.tsx","users/UpdateUser.tsx","auth/LoginForm.tsx","auth/RegisterForm.tsx","App.tsx","index.tsx"],"names":["CSRF_TOKEN_NAME","CSRF_HEADER_NAME","cookie","name","document","split","find","entry","client","axios","create","headers","value","reduce","ToyForm","toy","onSubmit","initialValues","price","validate","isSubmitting","type","placeholder","disabled","CreateToy","queryClient","useQueryClient","history","useHistory","createToy","useMutation","values","post","onSuccess","invalidateQueries","setSubmitting","mutate","push","ToyPreview","handleEdit","handleDelete","handleDetail","onClick","ListToys","toysQuery","useQuery","get","then","response","data","deleteToy","id","delete","length","map","DetailToy","useParams","isLoading","UpdateToy","updateToy","put","TicketForm","ticket","number","CreateTicket","createTicket","TicketPreview","ListTickets","ticketsQuery","deleteTicket","DetailTicket","UpdateTicket","updateTicket","UserForm","user","username","passwordHash","CreateUser","createUser","UserPreview","ListUsers","usersQuery","deleteUser","DetailUser","UpdateUser","updateUser","Login","useState","error","setError","handleError","message","handleSubmit","a","password","Register","api","email","passwordConfirm","App","retry","useEffect","defaults","catch","console","warn","className","to","path","component","ListToy","ListTicket","ListUser","LoginForm","RegisterForm","QueryClient","ReactDOM","render","StrictMode","QueryClientProvider","getElementById"],"mappings":"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","file":"static/js/main.024e97cb.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst CSRF_TOKEN_NAME = 'csrf-token'\nconst CSRF_HEADER_NAME = 'CSRF-Token'\n\n/**\n * cookie\n * Returns the value of the first cookie matching name `name`\n * or undefined.\n */\nexport function cookie(name: string): string | undefined {\n  // Inspired from\n  // https://developer.mozilla.org/en-US/docs/Web/API/Document/cookie#example_2_get_a_sample_cookie_named_test2\n  return document.cookie\n    .split('; ')\n    .find((entry) => entry?.split('=')[0] === name)\n    ?.split('=')[1]\n}\n\nexport function hasCSRFToken() {\n  return cookie(CSRF_TOKEN_NAME)\n}\n\nexport function fetchCSRFToken() {\n  client\n    .get('/auth/csrf')\n    .then(() => {\n      client.defaults.headers[CSRF_HEADER_NAME] = cookie(CSRF_TOKEN_NAME)\n    })\n    .catch((error) => {\n      console.warn('Received error while fetching CSRF token :', error)\n    })\n}\n\ntype HeaderEntry = {\n  [name: string]: string\n}\n\nconst client = axios.create({\n  headers: [\n    {\n      name: CSRF_HEADER_NAME,\n      value: cookie(CSRF_TOKEN_NAME),\n    },\n  ].reduce<HeaderEntry>((headers, entry) => {\n    if (entry.value) {\n      headers[entry.name] = entry.value\n    }\n    return headers\n  }, {}),\n})\n\nexport default client\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Toy } from '../types'\n\ntype CreateProps = {\n  toy?: Toy\n  onSubmit: (values: Toy, helpers: FormikHelpers<Toy>) => void\n}\n\nfunction ToyForm({ toy, onSubmit }: CreateProps) {\n  const initialValues: Toy = {\n    name: toy ? toy.name : '',\n    price: toy ? toy.price : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='name' placeholder='Name' />\n\n          <Field type='text' name='price' placeholder='Price' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default ToyForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Toy, ToyError } from '../types'\nimport ToyForm from './ToyForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateToy() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createToy = useMutation<Toy, ToyError, Toy>(\n    (values) => {\n      return client.post('/api/v1/toys', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('toys')\n      },\n    }\n  )\n\n  const handleSubmit = (values: Toy, { setSubmitting }: FormikHelpers<Toy>) => {\n    createToy.mutate(values)\n    setSubmitting?.(false)\n    history.push('/toys')\n  }\n\n  return <ToyForm onSubmit={handleSubmit} />\n}\n\nexport default CreateToy\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { Toy } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype ToyPreviewProps = {\n  toy: Toy\n  handleEdit: (toy: Toy) => void\n  handleDelete: (toy: Toy) => void\n  handleDetail: (toy: Toy) => void\n}\n\nfunction ToyPreview({\n  toy,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: ToyPreviewProps) {\n  return (\n    <>\n      {toy.name}\n      <br />\n      <button type='button' onClick={() => handleDetail(toy)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(toy)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(toy)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListToys() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const toysQuery = useQuery<Toy[]>('toys', () => {\n    return client\n      .get('/api/v1/toys')\n      .then((response) => response.data) as Promise<Toy[]>\n  })\n\n  const deleteToy = useMutation<any, any, Partial<Toy>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/toys/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('toys')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Toy) => {\n    history.push(`/toys/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Toy) => {\n    deleteToy.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Toy) => {\n    history.push(`/toys/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{toysQuery.data?.length} toys</p>\n      <ul>\n        {toysQuery.data?.map((toy) => (\n          <li key={toy.id}>\n            <ToyPreview\n              toy={toy}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListToys\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { Toy } from '../types'\n\nfunction DetailToy() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Toy>(['toys', id], () =>\n    client.get(`/api/v1/toys/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const toy = data as Toy\n\n  return (\n    <div>\n      <label>{toy.name}</label>\n      <br />\n\n      <label>{toy.price}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailToy\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport ToyForm from './ToyForm'\nimport { Toy } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateToy() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Toy>(['toys', id], () =>\n    client.get(`/api/v1/toys/${id}`).then((response) => response.data)\n  )\n\n  const updateToy = useMutation<Toy, any, Toy>(\n    (values: Toy) =>\n      client\n        .put(`/api/v1/toys/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('toys')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const toy = data as Toy\n  return (\n    <ToyForm\n      toy={toy}\n      onSubmit={(values, { setSubmitting }) => {\n        updateToy.mutate(values)\n        setSubmitting?.(false)\n        history.push('/toys')\n      }}\n    />\n  )\n}\n\nexport default UpdateToy\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { Ticket } from '../types'\n\ntype CreateProps = {\n  ticket?: Ticket\n  onSubmit: (values: Ticket, helpers: FormikHelpers<Ticket>) => void\n}\n\nfunction TicketForm({ ticket, onSubmit }: CreateProps) {\n  const initialValues: Ticket = {\n    number: ticket ? ticket.number : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='number' placeholder='Number' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default TicketForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { Ticket, TicketError } from '../types'\nimport TicketForm from './TicketForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateTicket() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createTicket = useMutation<Ticket, TicketError, Ticket>(\n    (values) => {\n      return client.post('/api/v1/tickets', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('tickets')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: Ticket,\n    { setSubmitting }: FormikHelpers<Ticket>\n  ) => {\n    createTicket.mutate(values)\n    setSubmitting?.(false)\n    history.push('/tickets')\n  }\n\n  return <TicketForm onSubmit={handleSubmit} />\n}\n\nexport default CreateTicket\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { Ticket } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype TicketPreviewProps = {\n  ticket: Ticket\n  handleEdit: (ticket: Ticket) => void\n  handleDelete: (ticket: Ticket) => void\n  handleDetail: (ticket: Ticket) => void\n}\n\nfunction TicketPreview({\n  ticket,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: TicketPreviewProps) {\n  return (\n    <>\n      {ticket.number}\n      <br />\n      <button type='button' onClick={() => handleDetail(ticket)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(ticket)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(ticket)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListTickets() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const ticketsQuery = useQuery<Ticket[]>('tickets', () => {\n    return client\n      .get('/api/v1/tickets')\n      .then((response) => response.data) as Promise<Ticket[]>\n  })\n\n  const deleteTicket = useMutation<any, any, Partial<Ticket>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/tickets/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('tickets')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: Ticket) => {\n    history.push(`/tickets/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: Ticket) => {\n    deleteTicket.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: Ticket) => {\n    history.push(`/tickets/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{ticketsQuery.data?.length} tickets</p>\n      <ul>\n        {ticketsQuery.data?.map((ticket) => (\n          <li key={ticket.id}>\n            <TicketPreview\n              ticket={ticket}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListTickets\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { Ticket } from '../types'\n\nfunction DetailTicket() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<Ticket>(['tickets', id], () =>\n    client.get(`/api/v1/tickets/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const ticket = data as Ticket\n\n  return (\n    <div>\n      <label>{ticket.number}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailTicket\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport TicketForm from './TicketForm'\nimport { Ticket } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateTicket() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<Ticket>(['tickets', id], () =>\n    client.get(`/api/v1/tickets/${id}`).then((response) => response.data)\n  )\n\n  const updateTicket = useMutation<Ticket, any, Ticket>(\n    (values: Ticket) =>\n      client\n        .put(`/api/v1/tickets/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('tickets')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const ticket = data as Ticket\n  return (\n    <TicketForm\n      ticket={ticket}\n      onSubmit={(values, { setSubmitting }) => {\n        updateTicket.mutate(values)\n        setSubmitting?.(false)\n        history.push('/tickets')\n      }}\n    />\n  )\n}\n\nexport default UpdateTicket\n","import React from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { User } from '../types'\n\ntype CreateProps = {\n  user?: User\n  onSubmit: (values: User, helpers: FormikHelpers<User>) => void\n}\n\nfunction UserForm({ user, onSubmit }: CreateProps) {\n  const initialValues: User = {\n    username: user ? user.username : '',\n    passwordHash: user ? user.passwordHash : '',\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={onSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n\n          <Field type='text' name='passwordHash' placeholder='PasswordHash' />\n\n          <button type='submit' disabled={isSubmitting}>\n            Submit\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default UserForm\n","import client from '../api'\nimport { FormikHelpers } from 'formik'\nimport React from 'react'\nimport { useMutation, useQueryClient } from 'react-query'\nimport { User, UserError } from '../types'\nimport UserForm from './UserForm'\nimport { useHistory } from 'react-router-dom'\n\nfunction CreateUser() {\n  const queryClient = useQueryClient()\n  const history = useHistory()\n  const createUser = useMutation<User, UserError, User>(\n    (values) => {\n      return client.post('/api/v1/users', values)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  const handleSubmit = (\n    values: User,\n    { setSubmitting }: FormikHelpers<User>\n  ) => {\n    createUser.mutate(values)\n    setSubmitting?.(false)\n    history.push('/users')\n  }\n\n  return <UserForm onSubmit={handleSubmit} />\n}\n\nexport default CreateUser\n","import React from 'react'\nimport { useQueryClient, useQuery, useMutation } from 'react-query'\nimport client from '../api'\nimport { User } from '../types'\nimport { useHistory } from 'react-router-dom'\n\ntype UserPreviewProps = {\n  user: User\n  handleEdit: (user: User) => void\n  handleDelete: (user: User) => void\n  handleDetail: (user: User) => void\n}\n\nfunction UserPreview({\n  user,\n  handleEdit,\n  handleDelete,\n  handleDetail,\n}: UserPreviewProps) {\n  return (\n    <>\n      {user.username}\n      <br />\n      <button type='button' onClick={() => handleDetail(user)}>\n        detail\n      </button>\n      <button type='button' onClick={() => handleEdit(user)}>\n        edit\n      </button>\n      <button type='button' onClick={() => handleDelete(user)}>\n        delete\n      </button>\n    </>\n  )\n}\n\nfunction ListUsers() {\n  const history = useHistory()\n  const queryClient = useQueryClient() // eslint-disable-line no-unused-vars\n  const usersQuery = useQuery<User[]>('users', () => {\n    return client\n      .get('/api/v1/users')\n      .then((response) => response.data) as Promise<User[]>\n  })\n\n  const deleteUser = useMutation<any, any, Partial<User>>(\n    ({ id }) => {\n      return client.delete(`/api/v1/users/${id}`)\n    },\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  const handleEdit = ({ id }: User) => {\n    history.push(`/users/update/${id}`)\n  }\n\n  const handleDelete = ({ id }: User) => {\n    deleteUser.mutate({ id })\n  }\n\n  const handleDetail = ({ id }: User) => {\n    history.push(`/users/detail/${id}`)\n  }\n\n  return (\n    <>\n      <p>{usersQuery.data?.length} users</p>\n      <ul>\n        {usersQuery.data?.map((user) => (\n          <li key={user.id}>\n            <UserPreview\n              user={user}\n              handleDelete={handleDelete}\n              handleEdit={handleEdit}\n              handleDetail={handleDetail}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  )\n}\n\nexport default ListUsers\n","import React from 'react'\nimport { useParams } from 'react-router-dom'\nimport client from '../api'\nimport { useQuery } from 'react-query'\nimport { User } from '../types'\n\nfunction DetailUser() {\n  const { id } = useParams<{ id: string }>()\n\n  const { data, isLoading } = useQuery<User>(['users', id], () =>\n    client.get(`/api/v1/users/${id}`).then((response) => response.data)\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const user = data as User\n\n  return (\n    <div>\n      <label>{user.username}</label>\n      <br />\n\n      <label>{user.passwordHash}</label>\n      <br />\n    </div>\n  )\n}\n\nexport default DetailUser\n","import client from '../api'\nimport React from 'react'\nimport { useParams, useHistory } from 'react-router-dom'\nimport UserForm from './UserForm'\nimport { User } from '../types'\nimport { useQuery, useMutation, useQueryClient } from 'react-query'\n\nfunction UpdateUser() {\n  const { id } = useParams<{ id: string }>()\n  const queryClient = useQueryClient()\n  const history = useHistory()\n\n  const { data, isLoading } = useQuery<User>(['users', id], () =>\n    client.get(`/api/v1/users/${id}`).then((response) => response.data)\n  )\n\n  const updateUser = useMutation<User, any, User>(\n    (values: User) =>\n      client\n        .put(`/api/v1/users/${id}`, values)\n        .then((response) => response.data),\n    {\n      onSuccess: () => {\n        queryClient.invalidateQueries('users')\n      },\n    }\n  )\n\n  if (isLoading) {\n    return <div>Loading...</div>\n  }\n\n  const user = data as User\n  return (\n    <UserForm\n      user={user}\n      onSubmit={(values, { setSubmitting }) => {\n        updateUser.mutate(values)\n        setSubmitting?.(false)\n        history.push('/users')\n      }}\n    />\n  )\n}\n\nexport default UpdateUser\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\n\nimport { LoginValues } from '../types'\nimport client from '../api'\nimport { useHistory } from 'react-router-dom'\nimport { useQueryClient } from 'react-query'\n\nfunction Login() {\n  const [error, setError] = useState<string>('')\n  const history = useHistory()\n  const queryClient = useQueryClient()\n\n  const initialValues: LoginValues = {\n    username: '',\n    password: '',\n  }\n\n  const handleError = (\n    error: any,\n    { setSubmitting }: Partial<FormikHelpers<LoginValues>>\n  ) => {\n    if (error.response && error.response.data) {\n      const { error: message } = error.response.data\n      message && setError(message)\n    }\n    setSubmitting?.(false)\n  }\n\n  const handleSubmit = async (\n    values: LoginValues,\n    { setSubmitting }: FormikHelpers<LoginValues>\n  ) => {\n    try {\n      await client.post('/auth/login', values)\n      setSubmitting?.(false)\n      await queryClient.invalidateQueries('user')\n      history.push('/')\n    } catch (error) {\n      handleError(error, { setSubmitting })\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n          <Field type='password' name='password' placeholder='Password' />\n          {error && <div>{error}</div>}\n          <button type='submit' disabled={isSubmitting}>\n            Login\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default Login\n","import React, { useState } from 'react'\nimport { Formik, Field, Form, FormikHelpers } from 'formik'\nimport { RegisterValues } from '../types'\nimport api from '../api'\n\nfunction Register() {\n  const [error, setError] = useState<string>('')\n\n  const initialValues: RegisterValues = {\n    username: '',\n    email: '',\n    password: '',\n    passwordConfirm: '',\n  }\n\n  const handleSubmit = async (\n    values: RegisterValues,\n    { setSubmitting }: FormikHelpers<RegisterValues>\n  ) => {\n    try {\n      await api.post('/auth/register', values)\n      setSubmitting?.(false)\n    } catch (error) {\n      if (error.response && error.response.data) {\n        const { error: message } = error.response.data\n        message && setError(message)\n      }\n      setSubmitting?.(false)\n    }\n  }\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validate={() => {\n        return {}\n      }}\n      onSubmit={handleSubmit}\n    >\n      {({ isSubmitting }) => (\n        <Form>\n          <Field type='text' name='username' placeholder='Username' />\n          <Field type='text' name='email' placeholder='Email' />\n          <Field type='password' name='password' placeholder='Password' />\n          <Field\n            type='password'\n            name='passwordConfirm'\n            placeholder='Confirm password'\n          />\n          {error && <div>{error}</div>}\n          <button type='submit' disabled={isSubmitting}>\n            Register\n          </button>\n        </Form>\n      )}\n    </Formik>\n  )\n}\n\nexport default Register\n","import React, { useEffect } from 'react'\n\nimport CreateToy from './toys/CreateToy'\nimport ListToy from './toys/ListToy'\nimport DetailToy from './toys/DetailToy'\nimport UpdateToy from './toys/UpdateToy'\n\nimport CreateTicket from './tickets/CreateTicket'\nimport ListTicket from './tickets/ListTicket'\nimport DetailTicket from './tickets/DetailTicket'\nimport UpdateTicket from './tickets/UpdateTicket'\n\nimport CreateUser from './users/CreateUser'\nimport ListUser from './users/ListUser'\nimport DetailUser from './users/DetailUser'\nimport UpdateUser from './users/UpdateUser'\n\nimport LoginForm from './auth/LoginForm'\nimport RegisterForm from './auth/RegisterForm'\n\nimport { Route, Switch, BrowserRouter as Router, Link } from 'react-router-dom'\n\nimport { useQuery } from 'react-query'\n\nimport client, { fetchCSRFToken, hasCSRFToken } from './api'\n\nfunction App() {\n  const { data: user } = useQuery('user', () => client.get('/auth/me'), {\n    retry: false,\n  })\n\n  useEffect(() => {\n    if (!hasCSRFToken()) fetchCSRFToken()\n  }, [])\n\n  return (\n    <Router>\n      <nav>\n        <ul className='flex'>\n          <li>\n            <Link to='/'>Home</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/login'>Login</Link>\n            <br />\n            <Link to='/register'>Register</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/toys'>Toys</Link>\n            <br />\n            <Link to='/toys/create'>Create a Toy</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/tickets'>Tickets</Link>\n            <br />\n            <Link to='/tickets/create'>Create a Ticket</Link>\n            <br />\n          </li>\n\n          <li className='ml-10'>\n            <Link to='/users'>Users</Link>\n            <br />\n            <Link to='/users/create'>Create a User</Link>\n            <br />\n          </li>\n        </ul>\n      </nav>\n      <main>\n        <Route path='/toys'>\n          <h1>Toys</h1>\n        </Route>\n\n        <Route path='/tickets'>\n          <h1>Tickets</h1>\n        </Route>\n\n        <Route path='/users'>\n          <h1>Users</h1>\n        </Route>\n\n        <Switch>\n          {/* Toy routes */}\n          <Route path='/toys/create' component={CreateToy} />\n          <Route path='/toys/update/:id' component={UpdateToy} />\n          <Route path='/toys/detail/:id' component={DetailToy} />\n          <Route path='/toys' component={ListToy} />,{/* Ticket routes */}\n          <Route path='/tickets/create' component={CreateTicket} />\n          <Route path='/tickets/update/:id' component={UpdateTicket} />\n          <Route path='/tickets/detail/:id' component={DetailTicket} />\n          <Route path='/tickets' component={ListTicket} />,{/* User routes */}\n          <Route path='/users/create' component={CreateUser} />\n          <Route path='/users/update/:id' component={UpdateUser} />\n          <Route path='/users/detail/:id' component={DetailUser} />\n          <Route path='/users' component={ListUser} />\n          {/* auth routes */}\n          <Route path='/login' component={LoginForm} />\n          <Route path='/register' component={RegisterForm} />\n        </Switch>\n      </main>\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { QueryClient, QueryClientProvider } from 'react-query'\n\nconst queryClient = new QueryClient()\n\nReactDOM.render(\n  <React.StrictMode>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}